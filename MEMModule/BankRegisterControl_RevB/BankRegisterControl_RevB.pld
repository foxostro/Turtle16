GAL22V10     ; Logic to control the memory-mapped bank register
BankRegisterControl_RevB
        
A0    A1    A2    A3    A4    A5    A6    A7    A8    A9    A10    GND
A11   A12   A13   A14   A15   B0    B1    B2    BS    RR    RL     VCC

; The Right side of RAM is connected to the instruction fetch unit.
; LOW indicates that the ROM should be selected in the instruction fetch unit.
; HIGH indicates that the RAM should be selected in the instruction fetch unit.
/RR = /B2 * /B1 * /B0

; The Left side of RAM is connected to the system memory bus.
; HIGH indicates that the RAM should be selected in the system bus.
RL = /B2 * /B1

; LOW indicates that the Bank register should be selected on the bus.
; This will happen when A=0xffff
/BS = A15 * A14 * A13 * A12 * A11 * A10 * A9 * A8 * A7 * A6 * A5 * A4 * A3 * A2 * A1 * A0


DESCRIPTION

Logic to control the memory-mapped bank register for Rev B of the MEM module.

* Instruction ROM is selected in the instruction fetch unit when Bank=0, otherwise Instruction RAM is selected in the instruction fetch unit.

* Instruction RAM is selected for access on the system bus when either Bank=0 or Bank=1.
The Bank register is selected for access on the system bus when the address is 0xffff, regardless of the currently selected bank.

* The Bank register resets to zero. The CPU will fetch instructions from ROM when it first powers on. Instruction RAM is mapped across the entire 64KB address space for data.

Regardless of the currently selected bank, the Bank register assumes the value of whatever word is stored at address 0xffff. This makes it difficult to use this address for general storage, of course. This this is best regarded as a write-only memory-mapped register.
