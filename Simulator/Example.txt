# let kSerialInterface = 6
# let kIORegister = 0
# let kStatusRegister = 1

LI D, 6 # kSerialInterface
LI P, 'H'

LI D, 6 # kSerialInterface
LI P, 'e'

LI D, 6 # kSerialInterface
LI P, 'l'

LI D, 6 # kSerialInterface
LI P, 'l'

LI D, 6 # kSerialInterface
LI P, 'o'

LI D, 6 # kSerialInterface
LI P, ','

LI D, 6 # kSerialInterface
LI P, ' '

LI D, 6 # kSerialInterface
LI P, 'W'

LI D, 6 # kSerialInterface
LI P, 'o'

LI D, 6 # kSerialInterface
LI P, 'r'

LI D, 6 # kSerialInterface
LI P, 'l'

LI D, 6 # kSerialInterface
LI P, 'd'

LI D, 6 # kSerialInterface
LI P, '!'

beginningOfInputLoop:

JALR waitForInput

# Read a byte and echo it back.
LI D, 6 # kSerialInterface
LI Y, 0 # kIORegister
MOV A, P
MOV P, A

JMP beginningOfInputLoop
HLT




waitForInput:

# Wait until the number of available bytes is greater than zero.
loop:
LI D, 6 # kSerialInterface
LI Y, 1 # kStatusRegister
MOV B, P
LI A, 1
CMP
JC loop

# Return from the function.
MOV X, G
MOV Y, H
JMP
