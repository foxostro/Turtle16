import stdlib

test "Variables" {
	// Immutable variables are declared with the let keyword.
	// It is not necessary to use a semicolon to end a statement
	let foo: u8 = 1

	// The type annotation may be omitted and the compiler will automatically deduce
	// the type.
	let bar = 2

	// Mutable variables are declared with the var keyword.
	var baz = 3
	baz = 4

	// Variables may be left undefined at time of declaration. In this case, the
	// type annotation is necessary.
	var qux: [32]bool = undefined
}

test "Primitive Types" {
	// A variable with a boolean type is declared using bool. Valid values are true
	// and false.
	var myBool: bool = true
	myBool = false

	// An unsigned eight-bit integer type is provided.
	let myUInt8: u8 = 255

	// As is an unsigned sixteen-bit integer type matching the native word size of
	// the Turtle16 CPU.
	let myUInt16: u16 = 65535

	// A signed eight-bit integer type is provided.
	let myInt8: i8 = -128

	// A signed sixteen-bit integer type is provided.
	let myInt16: i16 = -32768
}

test "Unsigned Integer Literal" {
	// Literal integers are deduced as the smallest type that fits the literal
	// value. (This may change in the future.)
	let a = 128
	assert(a is u8)

	let b = 40000
	assert(b is u16)

	// Hexadecimal numbers
	let c = 0xabcd

	// Binary numbers
	let d = 0b101010
}

test "Unicode Scalar Literal" {
	// Unicode scalar
	let a = 'a'
	assert(a is u8)
	assert(a == 97)

	let b = '\n'
	assert(b is u8)
	assert(b == 10)
}

test "Signed Integer Literal" {
	let a = -1000
	assert(a is i16)
	assert(a == -1000)

	let b = -1
	assert(b is i8)
	assert(b == -1)
}

test "Binary Operators: u16" {
	let p: u16 = 0xabab
	let q: u16 = 0xcdcd
	var a: u16 = undefined
	a = p + q  // addition
	a = p - q  // subtraction
	a = p * q  // multiplication
	a = p / q  // division
	a = p % q  // modulus
	a = p & q  // bitwise and
	a = p | q  // bitwise or
	a = p ^ q  // bitwise xor

	var b: bool = undefined
	b = p == q // equal
	b = p != q // not equal
	b = p > q  // greater than
	b = p < q  // less than
	b = p >= q // greater than or equal to
	b = p <= q // less than or equal to
}

test "Binary Operators: u8" {
	let p: u8 = 0xab
	let q: u8 = 0xcd
	var a: u8 = undefined
	a = p + q  // addition
	a = p - q  // subtraction
	a = p * q  // multiplication
	a = p / q  // division
	a = p % q  // modulus
	a = p & q  // bitwise and
	a = p | q  // bitwise or
	a = p ^ q  // bitwise xor

	var b: bool = undefined
	b = p == q // equal
	b = p != q // not equal
	b = p > q  // greater than
	b = p < q  // less than
	b = p >= q // greater than or equal to
	b = p <= q // less than or equal to
}

test "Binary Operators: i16" {
	let p: i16 = -1000
	let q: i16 = -1000
	var a: i16 = undefined
	a = p + q  // addition
	a = p - q  // subtraction
	a = p * q  // multiplication
	a = p / q  // division
	a = p % q  // modulus
	a = p & q  // bitwise and
	a = p | q  // bitwise or
	a = p ^ q  // bitwise xor

	var b: bool = undefined
	b = p == q // equal
	b = p != q // not equal
	b = p > q  // greater than
	b = p < q  // less than
	b = p >= q // greater than or equal to
	b = p <= q // less than or equal to
}

test "Binary Operators: i8" {
	let p: i8 = -1
	let q: i8 = -1
	var a: i8 = undefined
	a = p + q  // addition
	a = p - q  // subtraction
	a = p * q  // multiplication
	a = p / q  // division
	a = p % q  // modulus
	a = p & q  // bitwise and
	a = p | q  // bitwise or
	a = p ^ q  // bitwise xor

	var b: bool = undefined
	b = p == q // equal
	b = p != q // not equal
	b = p > q  // greater than
	b = p < q  // less than
	b = p >= q // greater than or equal to
	b = p <= q // less than or equal to
}

test "Binary Operators: bool" {
	let p: bool = true
	let q: bool = false
	var a: bool = undefined
	a = p && q // and (with short-circuiting evaluation)
	a = p || q // or  (with short-circuiting evaluation)
	a = p == q // equal
	a = p != q // not equal
}

test "Unary Operators: u16" {
	let p: u16 = 0xf0f0
	var a: u16 = undefined
	a = -p // negation
	a = ~p // bitwise negation
}

test "Unary Operators: u8" {
	let p: u8 = 0xf0
	var a: u8 = undefined
	a = -p // negation
	a = ~p // bitwise negation
}

test "Unary Operators: i16" {
	let p: i16 = -1000
	var a: i16 = undefined
	a = -p // negation
	a = ~p // bitwise negation
}

test "Unary Operators: i8" {
	let p: i8 = -1
	var a: i8 = undefined
	a = -p // negation
	a = ~p // bitwise negation
}

test "Unary Operators: bool" {
	let p: bool = true
	var a: bool = undefined
	a = !p // not
}

test "Unsigned Arithmetic Overflow and Underflow" {
	let a: u8 = 255
	assert((a+1) == 0)

	let b: u8 = 0
	assert((b-1) == 255)

	let c: u16 = 65535
	assert((c+1) == 0)

	let d: u16 = 0
	assert((d-1) == 65535)
}

test "Signed Arithmetic Overflow and Underflow" {
	let a: i8 = 127
	assert((a+1) == -128)

	let b: i8 = -128
	assert((b-1) == 127)

	let c: i16 = 32767
	assert((c+1) == -32768)

	let d: i16 = -32768
	assert((d-1) == 32767)
}

test "Pointers" {
	// The unary & operator may be used to produce a pointer.
	var a: u16 = 1
	let ptr = &a

	// Or a pointer may be produced through automatic type conversion. The pointer
	// type expression prefixes the pointee type with an asterisk.
	var ptr2: *u16 = a

	// Rebind the pointer by reassigning it
	ptr2 = ptr

	// Modify the pointee with using "pointee"
	ptr2.pointee = 2

	// Use const to create a pointer which cannot be used to mutate the pointee.
	// This pointer may itself be mutable.
	var ptr3: *const u16 = a
}

test "Ranges" {
	// Declare a range
	let range: Range = 0..1000

	// It's also possible to get the begin and limit of a range like so
	let rangeBegin = range.begin
	assert(rangeBegin == 0)

	let rangeLimit = range.limit
	assert(rangeLimit == 1000)
}

test "Arrays" {
	// Define an array with a size determined at compile time
	let a = [_]u8{1, 2, 3, 4, 5, 6, 7, 8, 9}
	let b = [9]u8{1, 2, 3, 4, 5, 6, 7, 8, 9}

	// Copy an array
	var c: [9]u8 = a

	// Access a single element of an array
	let c0 = c[0]
	c[0] = 42

	// Get the number of elements in an array
	let n = a.count

	// A string literal is syntax sugar for an [_]u8 array literal where the
	// elements of the array are the UTF-8 encoded bytes of the string.
	let s = "a UTF-8 string is an array of bytes"
	let d: u8 = s[0]

	// Strings may contain several types of escape sequences commonly seen in other languages.
	let escapeCharacters = "\t\n\r\"\'\\\0"
}

test "Array Slices" {
	// An array slice is a pointer and a length determined at runtime. Create a
	// slice from an array by subscripting the array with a value of a Range type.
	let str = "Hello, World!"
	let slice1 = str[0..6] // "Hello,"
	let slice2 = slice1[0..5] // "Hello"

	// Get the number of elements in a slice
	let n = slice2.count
	assert(n == 5)
}

test "Casting and Conversions" {
	// Convert a value to a different type with the as keyword
	let a: u8 = 1
	let b = a as u16

	// Converting an array will copy the array and convert each element individually
	let c = [_]u8{1, 2, 3}
	let d = c as [_]u16
}

test "Automatic Type Conversions" {
	// Automatic conversions in integer arithmetic will convert one side of a binary
	// expression to the wider of the two types
	let a = 1 + 50000 // a is u16

	// Automatic conversions between integer types are only permitted when the
	// values representable by the source type is a complete subset of the values
	// representable by the destination type.
	let b: u8 = 1
	let c: i16 = b // permitted because all values of u8 are reprentable in i16

	// The address of a value is automatically taken to convert to a pointer.
	let d: *u16 = a

	// Arrays are automatically converted to array slices
	let arr = [_]u8{1, 2, 3}
	let slice: []u8 = arr
}

test "Unsafe Bitcast" {
	// It's occasionally useful to perform an unsafe cast to reinterpret the
	// in-memory representation of a value as a different type. For example,
	// hardware may provide a memory-mapped register at an particular address and it
	// would be useful to have a pointer to that address.
	let ptr: *u16 = 0xabcd bitcastAs *u16
}

test "Structs" {
	// Declare a struct like so
	struct Point {
		x: u16,
		y: u16
	}

	// Declare an instance of a struct
	let p1 = Point {
		.x = 1,
		.y = 2
	}

	// Declare a struct with undefined contents and set the values of members later.
	var p2: Point = undefined
	p2.x = 1
	p2.y = 2

	// Declare a struct with some fields left undefined
	let p3 = Point { .x = 1 }

	// It is not necessary to use a special operator or syntax to access struct
	// members through a pointer. Use the standard dot syntax.
	let p4: *Point = p2
	p4.x = 3
	p4.y = 4
}

test "Unions and Is" {
	// Define a tagged union using the | operator in a type annotation.
	let q: u8 | bool = false

	// Test the type of a union value at runtime.
	assert(!(q is u8))

	// Use the "is" keyword to test the type of any other value too.
	let p = true
	assert(p is bool)
	assert(!(p is *bool))
}

test "Typealias" {
	// Create a type alias to create more convenient names for awkward types.
	typealias Foo = u8 | bool
	let a: Foo = false
}

test "If" {
	// If is a statement. Parentheses are not required. The curly braces are always
	// required, however.
	if 1 + 1 == 2 {
		// then branch
	} else {
		// else branch
	}
}

test "While" {
	// While loops don't require parentheses either and also require curly braces.
	var i = 0
	while i < 10 {
		i = i + 1
	}
}

test "For" {
	// For loops can iterate over the elements of a range
	// The curly braces are always required.
	let begin = 1
	let limit = 3
	for i in begin..limit {

	}

	// They can also iterate over the elements of an array
	let arr = [_]u8{1, 2, 3, 4, 5, 6, 7, 8, 9}
	for i in arr {

	}

	// Or of an array slice
	for i in arr[0..3] {

	}

	// C-style for loops are not supported in Snap.
}


test "Match" {
	// The match statement allows convenient type testing of union values
	var r: u8 = 0
	var a: u8 | bool = 0
	match a {
	    (foo: u8) -> {
			r = 1
	    },
	    (bar: bool) -> {
			r = 2
	    }
	}
	assert(r == 1)
}

test "Functions" {
	// Create a function with no return value or parameters.
	func foo() {
		puts("hello")
	}

	// Specify the return value with an arrow at the end of the signature.
	func bar() -> bool {
		return true
	}

	// Specify parameters in parentheses with labels and type annotations.
	func baz(aa: u8, bb: u16) -> u16 {
		return aa + bb
	}

	// The labels are not used at the function call site.
	let r1 = baz(1, 1000)
	assert(r1 == 1001)

	// Functions may be nested. These inner functions have access to the enclosing
	// lexical scopes.
	func qux(aa: u8, bb: u16) -> u16 {
		let c = 1
		func quux(aa: u8) -> u8 {
			return aa + c
		}
		return quux(aa) + bb
	}
	let r2 = qux(1, 1000)
	assert(r2 == 1002)
}

// TODO: SnapLanguageTests.snap:364: expected `)' in argument list of function pointer type expression
//test "Function Pointers" {
//	// Record a function pointer and use the pointer to invoke the function later.
//	var ptr: *func(aa: u8, bb: u16) -> u16 = undefined
//	ptr = &baz
//	ptr = qux
//	let r3 = ptr(1, 1)
//}

test "Struct Methods" {
	struct Point {
		x: u16,
		y: u16
	}

	// It is possible to add methods to a struct type using the "impl" keyword.
	// These are added to the namespace of the struct itself.
	impl Point {
		func add(p1: *Point, p2: *Point) -> Point {
			return Point {
				.x = p1.x + p2.x,
				.y = p1.y + p2.y
			}
		}
	}

	// Possibly across more than one impl block.
	impl Point {
		func sub(p1: *Point, p2: *Point) -> Point {
			return Point {
				.x = p1.x - p2.x,
				.y = p1.y - p2.y
			}
		}
	}

	let p1 = Point { .x = 1, .y = 1 }
	let p2 = Point { .x = 1, .y = 1 }
	let p3 = Point.add(p1, p2)
	let p4 = Point.sub(p1, p2)
}

//test "Traits" {
//	// Define a trait and the collection of functions that make up its interface.
//	trait Serial {
//		func write(self: *Serial, bytes: []u8)
//		func read(self: *Serial) -> []8
//	}
//
//	struct SerialFake {
//		cannedData: []u8
//	}
//
//	impl Serial for SerialFake {
//		func write(self: *SerialFake, bytes: []u8) {
//			puts(bytes)
//		}
//
//		func read(self: *SerialFake) -> []8 {
//			return self.cannedData
//		}
//	}
//
//	let concreteObject = SerialFake {}
//	let traitObject: Serial = concreteObject
//}

test "Compiler Instinsics" {
	// Halt execution immediately
	hlt()
}

test "Runtime Support: None" {
	var maybeInteger: u8 | None = none

	match maybeInteger {
	    (value: u8) -> {
			// something
	    },
	    (none: None) -> {
			// something else
	    }
	} 
}

test "Runtime Support: putc" {
	putc('\n')
}

test "Runtime Support: puts" {
	puts("foo\n")
}

test "Runtime Support: panic" {
	panic("Just making sure we can panic...")
}
