public struct Range {
    begin: u16, limit: u16
}

public struct Slice {
    base: u16, count: u16
}       

// Syscall numbers must match those in TackVirtualMachine.swift
private let kSyscallInvalid = 0
private let kSyscallRead = 1
private let kSyscallWrite = 2

public func __syscall(syscallNumber: u16, arg: *void) {
    asm("SYSCALL")
}

public func __getc() -> u8 {
    struct Arguments {
        character: u8
    }
    let args = Arguments {
        .character = 0
    }
    __syscall(kSyscallRead, &args bitcastAs *void)
    return args.character
}

public func __putc(c: u8) {
    struct Arguments {
        character: u8
    }
    let args = Arguments {
        .character = c
    }
    __syscall(kSyscallWrite, &args bitcastAs *void)
}

public func __puts(s: []const u8) {
    for c in s {
        __putc(c)
    }
}

public func __hlt() {
    asm("HLT")
}

public func __panic(message: []const u8) {
    static let kPanicPrefix = "PANIC: "
    static let kPanicSuffix = "\n"
    __puts(kPanicPrefix)
    __puts(message)
    __puts(kPanicSuffix)
    __hlt()
}

public func __oob() {
    static let kPanicMessageOOB = "array access is out of bounds"
    __panic(kPanicMessageOOB)
}
