public struct None {}
public let none = None {}

public typealias usize = u16

let kHeapStart: usize = 0x1000
var addrOfNextAllocation: usize = kHeapStart

// Simple bump allocator for demonstration purposes.
public func malloc[T]() -> *T {
    let size = sizeof(T)
    let result: *T = addrOfNextAllocation bitcastAs *T
    addrOfNextAllocation = addrOfNextAllocation + size
    return result
}

private let kSyscallRead = 0
private let kSyscallWrite = 1

public func read() -> u8 {
    struct Arguments {
        character: u8
    }
    let args = Arguments {
        .character = 0
    }
    __syscall(kSyscallRead, &args bitcastAs *void)
    return args.character
}

public func write(c: u8) {
    struct Arguments {
        character: u8
    }
    let args = Arguments {
        .character = c
    }
    __syscall(kSyscallWrite, &args bitcastAs *void)
}
